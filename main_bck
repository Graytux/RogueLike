#!/bin/bash

########################## Var Init
resize
term_largeur=$(tput cols)
term_hauteur=$(tput lines)

declare -A carte
msg=""

export PT_STA="@"
export PJ=""$(tput setaf 4)"@"$(tput sgr0)""
export VIDE="."
export OBJT=$VIDE
export xpos=0
export ypos=0
export xmax=35
export ymax=100
#export xmax=$((term_largeur - 15))
#export ymax=$((term_hauteur - 50))
export LAB=0

############################ Fonction
function InitCarte() {
	clear;
	echo -e "\n\n\tGeneration carte : en cours"
	export CSV="./data/level/${LAB}.csv"
	xpos=$(grep "$PT_STA" "$CSV" | awk -F ":" '{print $1}')
	ypos=$(grep "$PT_STA" "$CSV" | awk -F ":" '{print $2}')
	for x in $(seq 0 "$xmax"); do
        for y in $(seq 0 "$ymax"); do
			obj=$(grep "$x:$y:" $CSV | awk -F ":" '{print $3}')
			carte[$x,$y]=$obj
        done
    done
}

function Affichage() {
	for x in $(seq 0 "$xmax"); do
		for y in $(seq 0 "$ymax"); do
			printf ""$(tput cup $x $y)"${carte[$x,$y]}"
		done
	done
	printf ""$(tput cup $((xmax + 2)) 0)"actions [z-up]  [s-down]  [q-left]  [d-right]  [m-quit]"
	printf ""$(tput cup $((xmax + 3)) 0)"=> "
}

function Game() {
	Affichage "${carte[@]}"
	tput sc
	while :
		do
        	read -r -t 1 -n 1 key
        	if [[ $key = m ]]; then
                	break
        	elif [[ $key = z ]]; then
				if [[ ${carte[$((xpos - 1)),$ypos]} = "$VIDE" ]]; then
					msg="You go to UP"
					carte[$xpos,$ypos]=$VIDE
					printf ""$(tput cup $xpos $ypos)"${carte[$xpos,$ypos]}"
					xpos=$((xpos - 1))
					carte[$xpos,$ypos]=$PJ
					printf ""$(tput cup $xpos $ypos)"${carte[$xpos,$ypos]}"
				else
					msg="no way"
				fi
				printf $(tput cup $((xmax + 3)) 0)"=> ${msg}"
				tput rc
        	elif [[ $key = s ]]; then
				if [[ ${carte[$((xpos + 1)),$ypos]} = "$VIDE" ]]; then
					msg="You go to DOWN"
					carte[$xpos,$ypos]=$VIDE
					printf ""$(tput cup $xpos $ypos)"${carte[$xpos,$ypos]}"
					xpos=$((xpos + 1))
					carte[$xpos,$ypos]=$PJ
					printf ""$(tput cup $xpos $ypos)"${carte[$xpos,$ypos]}"
				else
					msg="no way"
				fi
				printf $(tput cup $((xmax + 3)) 0)"=> ${msg}"
				tput rc
        	elif [[ $key = q ]]; then
				if [[ ${carte[$xpos,$((ypos - 1))]} = "$VIDE" ]]; then
					msg="You go to LEFT"
					carte[$xpos,$ypos]=$VIDE
					printf ""$(tput cup $xpos $ypos)"${carte[$xpos,$ypos]}"
					ypos=$((ypos - 1))
					carte[$xpos,$ypos]=$PJ
					printf ""$(tput cup $xpos $ypos)"${carte[$xpos,$ypos]}"
				else
					msg="no way"
				fi
				printf ""$(tput cup $((xmax + 3)) 0)"=> ${msg}"
				tput rc
        	elif [[ $key = d ]]; then
				if [[ ${carte[$xpos,$((ypos + 1))]} = "$VIDE" ]]; then
					msg="You go to RIGHT"
					carte[$xpos,$ypos]=$VIDE
					printf ""$(tput cup $xpos $ypos)"${carte[$xpos,$ypos]}"
					ypos=$((ypos + 1))
					carte[$xpos,$ypos]=$PJ
					printf ""$(tput cup $xpos $ypos)"${carte[$xpos,$ypos]}"
				else
					msg="no way"
				fi
				printf ""$(tput cup $((xmax + 3)) 0)"=> ${msg}"
				tput rc
        	fi
	done
}

############################## Main ##############################
InitCarte "${carte[@]}"
tput clear
Game "${carte[@]}"

exit 0
